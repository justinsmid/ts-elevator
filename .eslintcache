[{"D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\index.js":"1","D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\App.js":"2","D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\Utils.ts":"3","D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\components\\ElevatorShaft.tsx":"4","D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\components\\Elevator.ts":"5"},{"size":219,"mtime":1609935737562,"results":"6","hashOfConfig":"7"},{"size":338,"mtime":1609951667953,"results":"8","hashOfConfig":"7"},{"size":424,"mtime":1609960593321,"results":"9","hashOfConfig":"7"},{"size":6190,"mtime":1609964073042,"results":"10","hashOfConfig":"7"},{"size":5534,"mtime":1609964596867,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"11xr1ll",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\index.js",[],["25","26"],"D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\App.js",[],"D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\Utils.ts",[],["27","28"],"D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\components\\ElevatorShaft.tsx",["29","30"],"import { ArrowDropDown, ArrowDropUp } from '@material-ui/icons';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { arrayOfLength } from '../Utils';\r\nimport { Elevator, ElevatorDirection, determineNextFloor, STATIONARY_TIMEOUT, getOppositeDirection, NextFloorResult, hasFloorsToMoveTo } from './Elevator';\r\nimport './Elevator.scss';\r\n\r\ninterface Props {\r\n    amountOfFloors: number\r\n};\r\n\r\nexport const ElevatorShaft: React.FC<Props> = ({ amountOfFloors }) => {\r\n    const [elevator, setElevator] = useState<Elevator>(() => new Elevator(amountOfFloors));\r\n\r\n    console.log(elevator);\r\n\r\n    useEffect(() => {\r\n        const moveElevatorInterval = window.setInterval(() => attemptToMoveElevator(elevator), 3000);\r\n        return () => window.clearInterval(moveElevatorInterval);\r\n    }, [elevator]);\r\n\r\n    const attemptToMoveElevator = (elevator: Elevator) => {\r\n        const nextFloorResult = determineNextFloor(elevator);\r\n\r\n        if (nextFloorResult === null) {\r\n            if (elevator.direction !== ElevatorDirection.STATIONARY) {\r\n                if (hasFloorsToMoveTo(elevator)) {\r\n                    // When no floor to visit was found, but there are still floors to be visited, change the elevator's direction and try to move again\r\n                    const newElevator: Elevator = {\r\n                        ...elevator,\r\n                        direction: getOppositeDirection(elevator)\r\n                    };\r\n\r\n                    setElevator(newElevator);\r\n                    attemptToMoveElevator(newElevator);\r\n                } else {\r\n                    // Else if there really are no more floors to visit, make the elevator become stationary after a given timeout\r\n                    setTimeout(() => {\r\n                        setElevator({\r\n                            ...elevator,\r\n                            direction: ElevatorDirection.STATIONARY\r\n                        });\r\n                    }, STATIONARY_TIMEOUT);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        const { floor: nextFloor } = nextFloorResult;\r\n\r\n        const directionFromCurrentFloor: ElevatorDirection = (\r\n            nextFloor > elevator.currentFloor\r\n                ? ElevatorDirection.UP\r\n                : nextFloor < elevator.currentFloor\r\n                    ? ElevatorDirection.DOWN\r\n                    : ElevatorDirection.STATIONARY\r\n        );\r\n\r\n        // TODO: Figure out whether always setting direction here is correct\r\n        const newElevator = {\r\n            ...elevator,\r\n            direction: directionFromCurrentFloor,\r\n            currentFloor: nextFloor,\r\n        };\r\n\r\n        if (nextFloorResult.isCall) {\r\n            newElevator.calls = newElevator.calls.filter(call => call.floor !== nextFloor);\r\n        } else {\r\n            newElevator.floorsToVisit = newElevator.floorsToVisit.filter(floor => floor !== nextFloor)\r\n        }\r\n\r\n        setElevator(newElevator);\r\n    };\r\n\r\n    const handleFloorButtonClick = (e: React.MouseEvent, floorNr: number) => {\r\n        if (floorNr === elevator.currentFloor) return; // The elevator does not need to move when the current floor's button is pressed\r\n\r\n        setElevator({\r\n            ...elevator,\r\n            floorsToVisit: [...elevator.floorsToVisit, floorNr]\r\n        });\r\n    };\r\n\r\n    const handleCallButtonClick = (e: React.MouseEvent, floorNr: number, direction: ElevatorDirection) => {\r\n        const callElevator = () => {\r\n            setElevator({\r\n                ...elevator,\r\n                calls: [...elevator.calls, {floor: floorNr, direction}]\r\n            });\r\n        };\r\n\r\n        if (floorNr === elevator.currentFloor) {\r\n            if (hasFloorsToMoveTo(elevator)) {\r\n                callElevator();\r\n            } else {\r\n                setElevator({\r\n                    ...elevator,\r\n                    direction\r\n                });\r\n            }\r\n        } else {\r\n            callElevator();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"elevator\">\r\n            {arrayOfLength(amountOfFloors).map((_, floorNr) => {\r\n                const elevatorPresent = elevator.currentFloor === floorNr;\r\n\r\n                return (\r\n                    <div key={`floor-${floorNr}`} className=\"floor-container\">\r\n                        <div className=\"call-buttons\">\r\n                            <ArrowDropUp className=\"btn\" onClick={e => handleCallButtonClick(e, floorNr, ElevatorDirection.UP)} />\r\n                            <ArrowDropDown className=\"btn\" onClick={e => handleCallButtonClick(e, floorNr, ElevatorDirection.DOWN)} />\r\n                        </div>\r\n                        {elevatorPresent\r\n                            ? <ElevatorAtFloor key={floorNr} elevator={elevator} handleFloorButtonClick={handleFloorButtonClick} />\r\n                            : <Floor key={floorNr} number={floorNr} />}\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface FloorProps {\r\n    number: number,\r\n    elevatorPresent?: boolean\r\n};\r\n\r\nconst Floor: React.FC<FloorProps> = ({ number, elevatorPresent = false, children }) => {\r\n    return (\r\n        <div className={`floor ${elevatorPresent ? 'current' : ''}`}>\r\n            <p className=\"number\">{number}</p>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface ElevatorAtFloorProps {\r\n    elevator: Elevator,\r\n    handleFloorButtonClick: (e: React.MouseEvent, floorNr: number) => void\r\n}\r\n\r\nconst ElevatorAtFloor: React.FC<ElevatorAtFloorProps> = ({ elevator: { currentFloor, amountOfFloors }, handleFloorButtonClick }) => {\r\n    return (\r\n        <Floor number={currentFloor} elevatorPresent={true}>\r\n            <div className=\"floor-buttons\">\r\n                {arrayOfLength(amountOfFloors).map((_, floorNr) => (\r\n                    <p\r\n                        key={`button-${floorNr}`}\r\n                        className={`${floorNr === currentFloor ? 'current' : ''}`}\r\n                        onClick={e => handleFloorButtonClick(e, floorNr)}\r\n                    >\r\n                        {floorNr}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n        </Floor>\r\n    );\r\n};\r\n","D:\\school\\afstudeerstage\\Marvia\\elevator\\elevator\\src\\components\\Elevator.ts",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":4,"column":101,"nodeType":"37","messageId":"38","endLine":4,"endColumn":116},{"ruleId":"39","severity":1,"message":"40","line":19,"column":8,"nodeType":"41","endLine":19,"endColumn":18,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"@typescript-eslint/no-unused-vars","'NextFloorResult' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'attemptToMoveElevator'. Either include it or remove the dependency array.","ArrayExpression",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Update the dependencies array to be: [attemptToMoveElevator, elevator]",{"range":"48","text":"49"},[798,808],"[attemptToMoveElevator, elevator]"]